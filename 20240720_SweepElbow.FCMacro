# -*- coding: utf-8 -*-

import FreeCAD as App
import FreeCADGui as Gui
import PartDesign
import PartDesignGui
import Sketcher
import Draft

# Parameters
int_diametrocirculo = 2
int_ladoSimetrico = 7
int_cifra_desconocida_1 = 2
int_cifra_desconocida_2 = 6
int_cifra_desconocida_3 = 3  # seems to be a radius

def create_new_document(name):
    doc = App.newDocument(name)
    doc.recompute()
    return doc

def create_body(doc, body_name):
    body = doc.addObject('PartDesign::Body', body_name)
    doc.recompute()
    return body

def create_sketch_on_xy_plane(doc, body):
    sketch = body.newObject('Sketcher::SketchObject', 'Sketch')
    sketch.Support = (doc.getObject('XY_Plane'), [''])
    sketch.MapMode = 'FlatFace'
    doc.recompute()
    return sketch

def add_circle_to_sketch(sketch):
    sketch.addGeometry(Part.Circle(App.Vector(0, 0, 0), App.Vector(0, 0, 1), int_diametrocirculo), False)
    sketch.addConstraint(Sketcher.Constraint('Coincident', 0, 3, -1, 1)) 
    sketch.recompute()

def create_sketch_on_xz_plane(doc, body):
    sketch = body.newObject('Sketcher::SketchObject', 'Sketch001')
    sketch.Support = (doc.getObject('XZ_Plane'), [''])
    sketch.MapMode = 'FlatFace'
    doc.recompute()
    return sketch

def add_lines_and_fillet_to_sketch(sketch):
    sketch.addGeometry(Part.LineSegment(App.Vector(0, 0, 0), App.Vector(0, int_ladoSimetrico, 0)), False)
    sketch.addConstraint(Sketcher.Constraint('Coincident', -1, 1, 0, 1)) 
    sketch.addConstraint(Sketcher.Constraint('PointOnObject', 0, 2, -2)) 
    sketch.addGeometry(Part.LineSegment(App.Vector(0, int_ladoSimetrico, 0), App.Vector(int_ladoSimetrico, int_ladoSimetrico, 0)), False)
    sketch.addConstraint(Sketcher.Constraint('Coincident', 0, 2, 1, 1)) 
    sketch.addConstraint(Sketcher.Constraint('Horizontal', 1)) 
    sketch.fillet(1, 0, App.Vector(int_cifra_desconocida_1, int_ladoSimetrico, 0), App.Vector(0, int_cifra_desconocida_2, 0), int_cifra_desconocida_3, True, False)
    sketch.recompute()

def create_additive_pipe(doc, body):
    pipe = body.newObject('PartDesign::AdditivePipe', 'AdditivePipe')
    pipe.Profile = body.getObject('Sketch')
    doc.recompute()
    body.getObject('Sketch').Visibility = False
    doc.recompute()
    pipe.Spine = (body.getObject('Sketch001'), [])
    doc.recompute()

def set_view_to_axonometric():
    view = Gui.ActiveDocument.ActiveView
    view.viewAxonometric()
    view.fitAll()

def move_body_along_axes(body, distanceX, distanceY, distanceZ):
    placement = body.Placement
    placement.Base.x += distanceX
    placement.Base.y += distanceY
    placement.Base.z += distanceZ
    body.Placement = placement
    App.ActiveDocument.recompute()

def copy_and_paste_body(doc, body, dx, dy, dz, new_body_name):
    copied_body = Draft.clone(body)
    copied_body.Label = new_body_name
    move_body_along_axes(copied_body, dx, dy, dz)
    return copied_body

def main():
    doc = create_new_document("MultiBodyDocument")
    
    initial_body = create_body(doc, "Body1")
    sketch1 = create_sketch_on_xy_plane(doc, initial_body)
    add_circle_to_sketch(sketch1)
    sketch2 = create_sketch_on_xz_plane(doc, initial_body)
    add_lines_and_fillet_to_sketch(sketch2)
    create_additive_pipe(doc, initial_body)
    
    positions = [
        (10, 0, -40),
        (20, 0, -40),
        (30, 0, -40),
        (-10, 0, -40),
        (-20, 0, -40),
        (-30, 0, -40)
    ]
    
    for i, pos in enumerate(positions):
        copy_and_paste_body(doc, initial_body, *pos, f"Body{i+2}")
    
    #delete_body(doc, "Body1")
    App.getDocument('MultiBodyDocument').removeObject('Body1')
    App.getDocument('MultiBodyDocument').removeObject('AdditivePipe')
    App.getDocument('MultiBodyDocument').removeObject('Sketch')
    App.getDocument('MultiBodyDocument').removeObject('Sketch001')

    App.getDocument('MultiBodyDocument').recompute()
    set_view_to_axonometric()

if __name__ == "__main__":
    main()
